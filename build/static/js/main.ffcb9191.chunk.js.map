{"version":3,"sources":["infrastructure/interfaces/ResponseStatus.ts","app/modules/common/ui/components/notify/styles.ts","app/modules/common/ui/components/notify/index.tsx","infrastructure/FetchResource.ts","app/modules/tasks/domain/enums/taskStatus.ts","app/modules/core/fetchResource.ts","app/modules/auth/store/index/actions.ts","app/modules/auth/store/index/reducer.ts","app/modules/auth/store/index/selectors.ts","app/modules/common/ui/components/list/index.tsx","app/modules/common/ui/components/loader/styles.ts","app/modules/common/ui/components/loader/index.tsx","app/modules/common/ui/components/paginator/index.tsx","app/modules/tasks/domain/repositories/tasksRepository.ts","infrastructure/BaseRepository.ts","app/modules/tasks/store/index/adapter.ts","app/modules/tasks/store/index/selectors.ts","app/modules/tasks/store/index/actions.ts","app/modules/tasks/ui/components/task-status/index.tsx","app/modules/tasks/ui/components/task-card/index.tsx","app/modules/common/domain/enums/ErrorTypeDescriptions.ts","app/modules/common/ui/components/error-message/index.tsx","app/modules/tasks/ui/forms/index/index.tsx","app/modules/tasks/ui/hooks/use-filter-in-query-params/index.ts","app/modules/tasks/ui/pages/index/index.tsx","app/modules/auth/ui/forms/login/index.tsx","app/modules/navigation/ui/components/header/index.tsx","app/modules/navigation/ui/layouts/main/index.tsx","app/modules/navigation/routes.tsx","reportWebVitals.ts","app/modules/tasks/store/index/reducer.ts","store/index.ts","index.tsx"],"names":["ResponseStatus","NotificationContainer","styled","div","container","React","createRef","Notification","ref","notify","options","message","delay","type","notificationContainer","current","textContent","classList","add","style","visibility","setTimeout","remove","TaskStatus","fetchResource","url","defaultOptions","endpoint","body","requestUrl","this","getRequestPath","queryParams","requestOptions","getRequestOptions","method","makeRequest","params","JSON","stringify","path","fetch","then","response","handleResponse","json","status","ERROR","queryString","Object","entries","reduce","pairs","key","value","concat","encodeURIComponent","join","replace","process","developer","AUTH_TOKEN","PREFIX","logout","createAction","localStorage","removeItem","payload","initializeAuthentication","getItem","login","createAsyncThunk","a","rejectWithValue","post","setItem","token","authSlice","createSlice","name","initialState","loading","reducers","setToken","state","clearToken","extraReducers","builder","addCase","pending","fulfilled","rejected","authStore","reducer","actions","storeSelector","isAuthLoadingSelector","createSelector","authTokenSelector","isAuthorizedSelector","CommonList","props","data","renderItem","className","listStyleType","map","Overflow","Indicator","Loader","visible","CommonPagination","active","total","perPage","onChange","pagesCount","Math","ceil","Pagination","Array","fill","undefined","_","index","page","Item","onClick","bind","tasksRepository","formData","resource","get","entity","put","patch","delete","tasksAdapter","createEntityAdapter","selectId","model","id","tasksStore","isLoadingSelector","tasksSelector","currentPageTasksIds","getSelectors","selectById","tasksCountSelector","tasksCount","tasksPageSelector","tasksSortParamsSelector","sort","setPage","setSortParams","saveTask","task","dispatch","getState","append","updatedTask","loadTasks","currentPage","currentSortParams","sort_field","field","sort_direction","direction","batch","load","TaskStatusDescription","0","1","10","11","TaskStatusComponent","TaskCardComponent","onEdit","Card","Body","Title","Row","Col","md","username","Subtitle","email","Text","text","Footer","Button","variant","ErrorTypeDescriptions","required","ErrorMessage","error","errorMessage","emailPattern","TasksForm","useDispatch","useSelector","isAuthorized","useForm","defaultValues","register","handleSubmit","errors","formState","setError","handleServerErrors","useCallback","onSubmit","event","FormData","target","unwrapResult","onDone","catch","Form","Check","label","Group","controlId","Label","Control","isInvalid","readOnly","placeholder","pattern","as","useFilterInQueryParams","location","useLocation","history","useHistory","sortParams","useEffect","urlSearch","URLSearchParams","search","sortField","sortDirection","pathname","set","push","toString","sorts","split","TasksPagesIndex","useState","isTaskModalShown","setIsTaskModalShown","selectedTask","setSelectedTask","tasks","tasksPage","onSortChange","onPageChange","onEditClick","onTaskModalDone","custom","Modal","show","onHide","Header","closeButton","AuthFormsLogin","password","NavigationComponentHeader","authorized","isAuthModalShown","setIsAuthModalShown","onLogoutClick","sm","NavigationLayoutsMain","Container","children","Navigator","storageEventsListener","newValue","window","addEventListener","removeEventListener","exact","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","getInitialState","total_task_count","upsertMany","store","configureStore","ReactDOM","render","StrictMode","document","getElementById","console","log"],"mappings":"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","file":"static/js/main.ffcb9191.chunk.js","sourcesContent":["export enum ResponseStatus {\n  OK = 'ok',\n  ERROR = 'error',\n}\n","import styled from 'styled-components';\n\nexport const NotificationContainer = styled.div`\n  position: fixed;\n  background: white;\n  padding: 8px 12px;\n  width: 60vw;\n  height: auto;\n  text-align: center;\n  border-radius: 5px;\n  z-index: 1;\n  top: 80%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  box-shadow: 4px 3px 20px 3px #5e5e5e;\n  visibility: hidden;\n`;\n","import React from 'react';\nimport * as Components from './styles';\n\nconst container = React.createRef<HTMLDivElement>();\n\ntype NotifyTypes = 'primary' | 'secondary' | 'success' | 'danger' | 'warning' | 'info';\n\ntype Options = {\n  message: string;\n  delay?: number;\n  type?: NotifyTypes;\n};\n\nconst notify = (options: Options) => {\n  const { message, delay, type = 'info' } = options;\n  const notificationContainer = container.current;\n  if (notificationContainer) {\n    notificationContainer.textContent = message;\n    notificationContainer.classList.add(`text-${type}`);\n    notificationContainer.style.visibility = 'visible';\n    setTimeout(() => {\n      notificationContainer.style.visibility = 'hidden';\n      notificationContainer.classList.remove(`text-${type}`);\n    }, delay ?? 3000);\n  }\n};\n\nexport const Notification = () => {\n  return <Components.NotificationContainer ref={container}></Components.NotificationContainer>;\n};\n\nexport default notify;\n","import { BaseResource, QueryParams, RequestOptions } from './interfaces/BaseResource';\nimport { Response } from './interfaces/Response';\nimport { ResponseStatus } from './interfaces/ResponseStatus';\n\nexport class FetchResource<Entity> implements BaseResource<Entity> {\n  constructor(private url: string, private defaultOptions: RequestOptions) {}\n\n  public post<ResponsePayload = Entity>(\n    endpoint: string,\n    body?: FormData,\n    options?: RequestOptions\n  ): Promise<ResponsePayload> {\n    const requestUrl = this.getRequestPath(endpoint, options?.queryParams);\n    const requestOptions = this.getRequestOptions({\n      ...options,\n      body,\n      method: 'POST',\n    });\n    return this.makeRequest<ResponsePayload>(requestUrl, requestOptions);\n  }\n  public get<ResponsePayload = Entity>(\n    endpoint: string,\n    params?: QueryParams,\n    options?: RequestOptions\n  ): Promise<ResponsePayload> {\n    const requestUrl = this.getRequestPath(endpoint, params);\n    const requestOptions = this.getRequestOptions({ ...options, method: 'GET' });\n    return this.makeRequest<ResponsePayload>(requestUrl, requestOptions);\n  }\n  public put<ResponsePayload = Entity>(\n    endpoint: string,\n    body?: Entity,\n    options?: RequestOptions\n  ): Promise<ResponsePayload> {\n    const requestUrl = this.getRequestPath(endpoint, options?.queryParams);\n    const requestOptions = this.getRequestOptions({ ...options, body: JSON.stringify(body), method: 'PUT' });\n    return this.makeRequest<ResponsePayload>(requestUrl, requestOptions);\n  }\n  public patch<ResponsePayload = Entity>(\n    endpoint: string,\n    body?: Entity,\n    options?: RequestOptions\n  ): Promise<ResponsePayload> {\n    const requestUrl = this.getRequestPath(endpoint, options?.queryParams);\n    const requestOptions = this.getRequestOptions({ ...options, body: JSON.stringify(body), method: 'PATCH' });\n    return this.makeRequest<ResponsePayload>(requestUrl, requestOptions);\n  }\n  public delete<ResponsePayload = Entity>(\n    endpoint: string,\n    body?: Entity,\n    options?: RequestOptions\n  ): Promise<ResponsePayload> {\n    const requestUrl = this.getRequestPath(endpoint, options?.queryParams);\n    const requestOptions = this.getRequestOptions({ ...options, body: JSON.stringify(body), method: 'DELETE' });\n    return this.makeRequest<ResponsePayload>(requestUrl, requestOptions);\n  }\n\n  private makeRequest<ResponsePayload = Entity>(path: string, options: RequestInit): Promise<ResponsePayload> {\n    return fetch(path, options).then((response) => this.handleResponse<ResponsePayload>(response));\n  }\n\n  private async handleResponse<ResponsePayload = Entity>(response: globalThis.Response): Promise<ResponsePayload> {\n    const json: Response<ResponsePayload> = await response.json();\n    if (json.status === ResponseStatus.ERROR) {\n      throw json.message;\n    }\n    return json.message;\n  }\n\n  private getRequestOptions(options?: RequestInit) {\n    return { ...this.defaultOptions, ...options };\n  }\n\n  private getRequestPath(endpoint: string, params?: QueryParams) {\n    const queryString = Object.entries({ ...this.defaultOptions.queryParams, ...params })\n      .reduce(\n        (pairs, [key, value]) => pairs.concat(`${encodeURIComponent(key)}=${encodeURIComponent(value)}`),\n        [] as string[]\n      )\n      .join('&');\n    return `${this.url}/${endpoint}/?${queryString}`.replace(/([^:]\\/)\\/+/g, '$1');\n  }\n}\n","export enum TaskStatus {\n  NOT_DONE = 0,\n  NOT_DONE_EDITED = 1,\n  DONE = 10,\n  DONE_EDITED = 11,\n}\n\nexport const TaskStatusDescription = {\n  0: 'задача не выполнена',\n  1: 'задача не выполнена, отредактирована админом',\n  10: 'задача выполнена',\n  11: 'задача отредактирована админом и выполнена',\n};\n","import { FetchResource } from '../../../infrastructure/FetchResource';\n\nconst BASE_URL = process.env.REACT_APP_BASE_URL as string;\nconst fetchResource = new FetchResource(BASE_URL, { queryParams: { developer: 'Ilnar' } });\n\nexport default fetchResource;\n","import { createAction, createAsyncThunk } from '@reduxjs/toolkit';\nimport fetchResource from '../../../core/fetchResource';\n\nexport const AUTH_TOKEN = `@auth-token`;\n\nconst PREFIX = 'auth';\n\nexport const logout = createAction(`${PREFIX}/logout`, () => {\n  localStorage.removeItem(AUTH_TOKEN);\n  return { payload: null };\n});\n\nexport const initializeAuthentication = createAction(`${PREFIX}/initializeAuthentication`, () => ({\n  payload: localStorage.getItem(AUTH_TOKEN) as string,\n}));\n\nexport const login = createAsyncThunk<string, FormData>(`${PREFIX}/login`, async (payload, { rejectWithValue }) => {\n  try {\n    const response = await fetchResource.post<{ token: string }>('/login', payload);\n    localStorage.setItem(AUTH_TOKEN, response.token);\n    return response.token;\n  } catch (error) {\n    return rejectWithValue(error);\n  }\n});\n","import { createSlice } from '@reduxjs/toolkit';\nimport { initializeAuthentication, login, logout } from './actions';\n\nconst authSlice = createSlice({\n  name: 'auth',\n  initialState: {\n    loading: false,\n    token: '',\n  },\n  reducers: {\n    setToken: (state, { payload }) => {\n      state.token = payload;\n    },\n    clearToken: (state) => {\n      state.token = '';\n    },\n  },\n  extraReducers: (builder) => {\n    builder.addCase(initializeAuthentication, (state, { payload }) => {\n      state.token = payload;\n    });\n    builder.addCase(logout, (state) => {\n      state.token = '';\n    });\n    builder.addCase(login.pending, (state) => {\n      state.loading = true;\n    });\n    builder.addCase(login.fulfilled, (state, { payload }) => {\n      state.loading = false;\n      state.token = payload;\n    });\n    builder.addCase(login.rejected, (state) => {\n      state.loading = false;\n    });\n  },\n});\n\nconst authStore = authSlice.reducer;\ntype authStore = ReturnType<typeof authSlice.reducer>;\n\nexport const { setToken, clearToken } = authSlice.actions;\n\nexport default authStore;\n","import { createSelector } from '@reduxjs/toolkit';\nimport authStore from './reducer';\n\nconst storeSelector = (state: any): authStore => state.authStore;\n\nexport const isAuthLoadingSelector = createSelector(storeSelector, (state) => state.loading);\nexport const authTokenSelector = createSelector(storeSelector, (state) => state.token);\nexport const isAuthorizedSelector = createSelector(authTokenSelector, (token) => !!token);\n","type Props<ListItem> = {\n  data: ListItem[];\n  renderItem: (item: ListItem, index: number) => JSX.Element;\n};\n\nconst CommonList = <ListItem extends any>(props: Props<ListItem>) => {\n  const { data, renderItem } = props;\n  return (\n    <ul className=\"p-0\" style={{ listStyleType: 'none' }}>\n      {data.map(renderItem)}\n    </ul>\n  );\n};\n\nexport default CommonList;\n","import styled from 'styled-components';\n\nexport const Overflow = styled.div`\n  position: fixed;\n  z-index: 2;\n  top: 0;\n  bottom: 0;\n  left: 0;\n  right: 0;\n  background-color: #0005;\n`;\n\nexport const Indicator = styled.div`\n  display: inline-block;\n  /* position: relative; */\n  width: 80px;\n  height: 80px;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n\n  &:after {\n    content: ' ';\n    display: block;\n    border-radius: 50%;\n    width: 0;\n    height: 0;\n    margin: 8px;\n    box-sizing: border-box;\n    border: 32px solid #fff;\n    border-color: #fff transparent #fff transparent;\n    animation: lds-hourglass 1.2s infinite;\n  }\n  @keyframes lds-hourglass {\n    0% {\n      transform: rotate(0);\n      animation-timing-function: cubic-bezier(0.55, 0.055, 0.675, 0.19);\n    }\n    50% {\n      transform: rotate(900deg);\n      animation-timing-function: cubic-bezier(0.215, 0.61, 0.355, 1);\n    }\n    100% {\n      transform: rotate(1800deg);\n    }\n  }\n`;\n","import * as Components from './styles';\n\ntype Props = {\n  visible: boolean;\n};\n\nconst Loader = (props: Props) => {\n  if (props.visible) {\n    return (\n      <Components.Overflow>\n        <Components.Indicator></Components.Indicator>\n      </Components.Overflow>\n    );\n  }\n  return null;\n};\n\nexport default Loader;\n","import { Pagination } from 'react-bootstrap';\n\ntype Props = {\n  active: number;\n  total: number;\n  perPage?: number;\n  onChange: (page: number) => void;\n};\n\nconst CommonPagination = (props: Props) => {\n  const { active, total, perPage = 3, onChange } = props;\n  const pagesCount = Math.ceil(total / perPage);\n  return (\n    <Pagination>\n      {Array(pagesCount)\n        .fill(undefined)\n        .map((_, index) => {\n          const page = index + 1;\n          return (\n            <Pagination.Item key={page} active={page === active} onClick={onChange.bind(null, page)}>\n              {page}\n            </Pagination.Item>\n          );\n        })}\n    </Pagination>\n  );\n};\n\nexport default CommonPagination;\n","import { EntityRepository } from '../../../../../infrastructure/BaseRepository';\nimport fetchResource from '../../../core/fetchResource';\nimport { Task } from '../interfaces/task';\n\nclass TasksRepository extends EntityRepository<Task> {\n  updateByPost(formData: FormData, options?: RequestInit) {\n    return this.resource.post(`edit/${formData.get('id')}`, formData, options);\n  }\n}\n\nconst tasksRepository = new TasksRepository(fetchResource, '/');\nexport default tasksRepository;\n","import { BaseRepository } from './interfaces/BaseRepository';\nimport { BaseResource, RequestOptions } from './interfaces/BaseResource';\n\nexport class EntityRepository<Entity> implements BaseRepository<Entity> {\n  constructor(\n    protected resource: BaseResource<Entity>,\n    private endpoint: string,\n    private defaultOptions?: RequestOptions\n  ) {}\n\n  public create<RequestResponse = Entity>(formData: FormData, options?: RequestOptions): Promise<RequestResponse> {\n    return this.resource.post(`${this.endpoint}/create`, formData, options);\n  }\n  public load<RequestResponse = Entity>(\n    params?: Record<string, string>,\n    options?: RequestOptions\n  ): Promise<RequestResponse> {\n    return this.resource.get(this.endpoint, params, options);\n  }\n  public update<RequestResponse = Entity>(entity: Entity, options?: RequestOptions): Promise<RequestResponse> {\n    return this.resource.put(this.endpoint, entity, options);\n  }\n  public patch<RequestResponse = Entity>(entity: Entity, options?: RequestOptions): Promise<RequestResponse> {\n    return this.resource.patch(this.endpoint, entity, options);\n  }\n  public delete<RequestResponse = Entity>(entity: Entity, options?: RequestOptions): Promise<RequestResponse> {\n    return this.resource.delete(this.endpoint, entity, options);\n  }\n\n  public composeOptions(options: RequestOptions) {\n    return { ...this.defaultOptions, ...options };\n  }\n}\n","import { createEntityAdapter } from '@reduxjs/toolkit';\nimport { Task } from '../../domain/interfaces/task';\n\nexport const tasksAdapter = createEntityAdapter<Task>({\n  selectId: (model) => model.id,\n});\n","import { createSelector } from '@reduxjs/toolkit';\nimport { Task } from '../../domain/interfaces/task';\nimport { tasksAdapter } from './adapter';\nimport tasksStore from './reducer';\n\nconst storeSelector = (state: any): tasksStore => state.tasksStore;\n\nexport const isLoadingSelector = createSelector(storeSelector, (state) => state.loading);\n\nexport const tasksSelector = createSelector(storeSelector, (state) =>\n  state.currentPageTasksIds.map((id) => tasksAdapter.getSelectors().selectById(state, id) as Task)\n);\n\nexport const tasksCountSelector = createSelector(storeSelector, (state) => state.tasksCount);\n\nexport const tasksPageSelector = createSelector(storeSelector, (state) => state.page);\n\nexport const tasksSortParamsSelector = createSelector(storeSelector, (state) => state.sort);\n","import { createAction, createAsyncThunk } from '@reduxjs/toolkit';\nimport { batch } from 'react-redux';\nimport { authTokenSelector } from '../../../auth/store/index/selectors';\nimport { SortParams } from '../../domain/interfaces/sortParams';\nimport { Task } from '../../domain/interfaces/task';\nimport tasksRepository from '../../domain/repositories/tasksRepository';\nimport { tasksPageSelector, tasksSortParamsSelector } from './selectors';\n\nconst PREFIX = 'tasks/index';\n\ntype TasksListResponse = { tasks: Task[]; total_task_count: number };\ntype LoadTasksOptions =\n  | {\n      page?: number;\n      sort?: SortParams;\n    }\n  | undefined;\n\nexport const setPage = createAction<number>(`${PREFIX}/setPage`);\nexport const setSortParams = createAction<SortParams>(`${PREFIX}/setSortParams`);\n\nexport const saveTask = createAsyncThunk<Task, FormData>(\n  `${PREFIX}/saveTask`,\n  async (task, { dispatch, getState, rejectWithValue }) => {\n    const token = authTokenSelector(getState());\n    task.append('token', token);\n\n    let updatedTask;\n    try {\n      updatedTask = await tasksRepository[task.get('id') ? 'updateByPost' : 'create'](task);\n    } catch (error) {\n      return rejectWithValue(error);\n    }\n    await dispatch(loadTasks());\n    return updatedTask;\n  }\n);\n\nexport const loadTasks = createAsyncThunk<TasksListResponse, LoadTasksOptions>(\n  `${PREFIX}/loadTasks`,\n  (params, { dispatch, getState }) => {\n    const currentPage = tasksPageSelector(getState());\n    const currentSortParams = tasksSortParamsSelector(getState());\n    const { page = currentPage, sort } = params || {};\n    const sort_field = sort?.field || currentSortParams.field || '';\n    const sort_direction = sort?.direction || currentSortParams.direction || '';\n    batch(() => {\n      dispatch(setPage(page));\n      dispatch(setSortParams({ field: sort_field, direction: sort_direction }));\n    });\n    return tasksRepository.load<TasksListResponse>({ page: page + '', sort_field, sort_direction });\n  }\n);\n","import { TaskStatus, TaskStatusDescription } from '../../../domain/enums/taskStatus';\n\ntype Props = {\n  status: TaskStatus;\n};\n\nconst TaskStatusComponent = (props: Props) => {\n  const { status } = props;\n  return (\n    <p>\n      <small>{TaskStatusDescription[status]}</small>\n    </p>\n  );\n};\n\nexport default TaskStatusComponent;\n","import { Card, Row, Col, Button } from 'react-bootstrap';\nimport { Task } from '../../../domain/interfaces/task';\nimport TaskStatusComponent from '../task-status';\n\ntype Props = {\n  task: Task;\n  onEdit?: (task: Task) => void;\n};\n\nconst TaskCardComponent = (props: Props) => {\n  const { task, onEdit } = props;\n  return (\n    <Card className=\"mb-4\" key={task.id}>\n      <Card.Body>\n        <Card.Title>\n          <Row>\n            <Col md=\"auto\">{task.username}</Col>\n            <Col></Col>\n            <Col md=\"auto\">\n              <TaskStatusComponent status={task.status}></TaskStatusComponent>\n            </Col>\n          </Row>\n        </Card.Title>\n        <Card.Subtitle className=\"mb-2 text-muted\">{task.email}</Card.Subtitle>\n        <Card.Text>{task.text}</Card.Text>\n      </Card.Body>\n      {onEdit && (\n        <Card.Footer>\n          <Button variant=\"danger\" onClick={onEdit?.bind(null, task)}>\n            Редактировать\n          </Button>\n        </Card.Footer>\n      )}\n    </Card>\n  );\n};\n\nexport default TaskCardComponent;\n","export const ErrorTypeDescriptions = {\n  required: 'Поле обязательно для заполнения',\n};\n","import { FieldError } from 'react-hook-form';\nimport { ErrorTypeDescriptions } from '../../../domain/enums/ErrorTypeDescriptions';\n\ntype Props = {\n  error?: FieldError;\n};\n\nconst ErrorMessage = (props: Props) => {\n  const { error } = props;\n  if (error) {\n    const errorMessage =\n      error?.message || ErrorTypeDescriptions[error?.type as keyof typeof ErrorTypeDescriptions] || 'Ошибка';\n    return <span className=\"text-danger\">{errorMessage}</span>;\n  }\n  return null;\n};\n\nexport default ErrorMessage;\n","import { unwrapResult } from '@reduxjs/toolkit';\nimport { useCallback } from 'react';\nimport { Button, Col, Form, Row } from 'react-bootstrap';\nimport { SubmitHandler, useForm } from 'react-hook-form';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { AppDispatch } from '../../../../../../store';\nimport { isAuthorizedSelector } from '../../../../auth/store/index/selectors';\nimport ErrorMessage from '../../../../common/ui/components/error-message';\nimport Loader from '../../../../common/ui/components/loader';\nimport notify from '../../../../common/ui/components/notify';\nimport { Task } from '../../../domain/interfaces/task';\nimport { saveTask } from '../../../store/index/actions';\nimport { isLoadingSelector } from '../../../store/index/selectors';\n\ntype Props = {\n  task?: Task;\n  onDone?: (task: Task) => any;\n};\n\nconst emailPattern =\n  /^(([^<>()[\\]\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@(([^<>()[\\]\\.,;:\\s@\\\"]+\\.)+[^<>()[\\]\\.,;:\\s@\\\"]{2,})$/i;\n\nconst TasksForm = (props: Props) => {\n  const { task } = props;\n  const dispatch = useDispatch<AppDispatch>();\n  const loading = useSelector(isLoadingSelector);\n  const isAuthorized = useSelector(isAuthorizedSelector);\n  const {\n    register,\n    handleSubmit,\n    formState: { errors },\n    setError,\n  } = useForm({ defaultValues: task });\n\n  const handleServerErrors = useCallback((errors: Record<keyof Task, string>) => {\n    if (typeof errors === 'string') {\n      const message = errors;\n      notify({ message, type: 'danger' });\n    } else {\n      for (const [key, message] of Object.entries(errors)) {\n        setError(key as keyof Task, { type: 'validate', message });\n      }\n    }\n  }, []);\n\n  const onSubmit = useCallback<SubmitHandler<Task>>((task, event) => {\n    const payload = new FormData(event?.target);\n    dispatch(saveTask(payload))\n      .then(unwrapResult)\n      .then(() => {\n        notify({ message: 'Success', type: 'success' });\n        props.onDone && props.onDone(task);\n      })\n      .catch((errors: Record<keyof Task, string>) => handleServerErrors(errors));\n  }, []);\n  return (\n    <Form onSubmit={handleSubmit(onSubmit)}>\n      <input type=\"hidden\" {...register('id')} />\n      {task?.id && isAuthorized && <Form.Check type=\"switch\" id=\"status\" label=\"Status\" {...register('status')} />}\n      <Form.Group controlId=\"username\">\n        <Form.Label>Username</Form.Label>\n        <Form.Control isInvalid={!!errors.username} readOnly={!!task} {...register('username', { required: true })} />\n        <ErrorMessage error={errors.username} />\n      </Form.Group>\n      <Form.Group controlId=\"email\">\n        <Form.Label>Email address</Form.Label>\n        <Form.Control\n          type=\"email\"\n          placeholder=\"name@example.com\"\n          readOnly={!!task}\n          isInvalid={!!errors.email}\n          {...register('email', { required: true, pattern: { value: emailPattern, message: 'Неверный email' } })}\n        />\n        <ErrorMessage error={errors.email} />\n      </Form.Group>\n      <Form.Group controlId=\"text\">\n        <Form.Label>Text</Form.Label>\n        <Form.Control\n          type=\"text\"\n          as=\"textarea\"\n          placeholder=\"Task text\"\n          isInvalid={!!errors.text}\n          {...register('text', { required: true })}\n        />\n        <ErrorMessage error={errors.text} />\n      </Form.Group>\n      <Row>\n        <Col></Col>\n        <Col md=\"auto\">\n          <Button variant=\"primary\" type=\"submit\">\n            Submit\n          </Button>\n        </Col>\n      </Row>\n      <Loader visible={loading}></Loader>\n    </Form>\n  );\n};\n\nexport default TasksForm;\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useHistory, useLocation } from 'react-router-dom';\nimport { SortParams } from '../../../domain/interfaces/sortParams';\nimport { setPage, setSortParams } from '../../../store/index/actions';\nimport { tasksPageSelector, tasksSortParamsSelector } from '../../../store/index/selectors';\n\nconst useFilterInQueryParams = () => {\n  const dispatch = useDispatch();\n  const location = useLocation();\n  const history = useHistory();\n\n  const page = useSelector(tasksPageSelector);\n  const sortParams = useSelector(tasksSortParamsSelector);\n\n  useEffect(() => {\n    const urlSearch = new URLSearchParams(location.search);\n    const page = urlSearch.get('page') || 1;\n    const sortField = urlSearch.get('sort_field') as SortParams['field'];\n    const sortDirection = urlSearch.get('sort_direction') as SortParams['direction'];\n    dispatch(setPage(+page));\n    dispatch(setSortParams({ field: sortField ?? 'id', direction: sortDirection ?? 'asc' }));\n  }, []);\n\n  useEffect(() => {\n    const pathname = location.pathname;\n    const urlSearch = new URLSearchParams(location.search);\n    urlSearch.set('page', page + '');\n    urlSearch.set('sort_field', sortParams.field);\n    urlSearch.set('sort_direction', sortParams.direction);\n    history.push({\n      pathname,\n      search: urlSearch.toString(),\n    });\n  }, [location.pathname, location.search, history, page, sortParams.field, sortParams.direction]);\n  return { page, sort: `${sortParams.field} ${sortParams.direction}` };\n};\n\nexport default useFilterInQueryParams;\n","import { ChangeEvent, useCallback, useEffect, useState } from 'react';\nimport { Button, Col, Form, Modal, Row } from 'react-bootstrap';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { AppDispatch } from '../../../../../../store';\nimport { isAuthorizedSelector } from '../../../../auth/store/index/selectors';\nimport CommonList from '../../../../common/ui/components/list';\nimport Loader from '../../../../common/ui/components/loader';\nimport CommonPagination from '../../../../common/ui/components/paginator';\nimport { SortParams } from '../../../domain/interfaces/sortParams';\nimport { Task } from '../../../domain/interfaces/task';\nimport { loadTasks } from '../../../store/index/actions';\nimport {\n  isLoadingSelector,\n  tasksCountSelector,\n  tasksPageSelector,\n  tasksSelector,\n} from '../../../store/index/selectors';\nimport TaskCardComponent from '../../components/task-card';\nimport TasksForm from '../../forms/index';\nimport useFilterInQueryParams from '../../hooks/use-filter-in-query-params';\n\nconst sorts = 'id,username,email,status'\n  .split(',')\n  .reduce(\n    (sorts, field) => sorts.concat('asc,desc'.split(',').map((direction) => `${field} ${direction}`)),\n    [] as string[]\n  );\n\nconst TasksPagesIndex = () => {\n  const [isTaskModalShown, setIsTaskModalShown] = useState(false);\n  const [selectedTask, setSelectedTask] = useState<Task>();\n  const { sort } = useFilterInQueryParams();\n\n  const dispatch = useDispatch<AppDispatch>();\n  const tasks = useSelector(tasksSelector);\n  const loading = useSelector(isLoadingSelector);\n  const tasksCount = useSelector(tasksCountSelector);\n  const tasksPage = useSelector(tasksPageSelector);\n  const isAuthorized = useSelector(isAuthorizedSelector);\n\n  useEffect(() => {\n    dispatch(loadTasks());\n  }, []);\n\n  const onSortChange = useCallback((event: ChangeEvent<HTMLSelectElement>) => {\n    const value = event?.target?.value;\n    const [field, direction] = value?.split(' ') as [SortParams['field'], SortParams['direction']];\n    dispatch(loadTasks({ sort: { field, direction } }));\n  }, []);\n\n  const onPageChange = useCallback((page) => {\n    dispatch(loadTasks({ page }));\n  }, []);\n\n  const onEditClick = useCallback((task: Task) => {\n    setSelectedTask(task);\n    setIsTaskModalShown(true);\n  }, []);\n\n  const onTaskModalDone = useCallback(() => {\n    setSelectedTask(undefined);\n    setIsTaskModalShown(false);\n  }, []);\n\n  return (\n    <>\n      <Row className=\"mb-4\">\n        <Col md=\"auto\">\n          <Button variant=\"primary\" onClick={setIsTaskModalShown.bind(null, true)}>\n            Добавить задачу\n          </Button>\n        </Col>\n        <Col></Col>\n        <Col md=\"auto\">\n          <Form.Control as=\"select\" value={sort} custom onChange={onSortChange}>\n            {sorts.map((sort) => (\n              <option key={sort}>{sort}</option>\n            ))}\n          </Form.Control>\n        </Col>\n      </Row>\n      <Row>\n        <Col>\n          <CommonList\n            data={tasks}\n            renderItem={(task) => (\n              <TaskCardComponent key={task.id} task={task} onEdit={isAuthorized ? onEditClick : undefined} />\n            )}\n          ></CommonList>\n          <CommonPagination total={tasksCount} active={tasksPage} onChange={onPageChange} />\n        </Col>\n      </Row>\n      <Modal show={isTaskModalShown} onHide={setIsTaskModalShown.bind(null, false)}>\n        <Modal.Header closeButton>\n          <Modal.Title>Создание задачи</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n          <TasksForm task={selectedTask} onDone={onTaskModalDone}></TasksForm>\n        </Modal.Body>\n      </Modal>\n      <Loader visible={loading}></Loader>\n    </>\n  );\n};\n\nexport default TasksPagesIndex;\n","import { unwrapResult } from '@reduxjs/toolkit';\nimport { useCallback } from 'react';\nimport { Button, Col, Form, Row } from 'react-bootstrap';\nimport { SubmitHandler, useForm } from 'react-hook-form';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { AppDispatch } from '../../../../../../store';\nimport ErrorMessage from '../../../../common/ui/components/error-message';\nimport Loader from '../../../../common/ui/components/loader';\nimport notify from '../../../../common/ui/components/notify';\nimport { Task } from '../../../../tasks/domain/interfaces/task';\nimport { loginPayload } from '../../../domain/interfaces/loginPayload';\nimport { login } from '../../../store/index/actions';\nimport { isAuthLoadingSelector } from '../../../store/index/selectors';\n\ntype Props = {\n  onDone?: () => void;\n};\n\nconst AuthFormsLogin = (props: Props) => {\n  const loading = useSelector(isAuthLoadingSelector);\n  const dispatch = useDispatch<AppDispatch>();\n  const {\n    register,\n    handleSubmit,\n    formState: { errors },\n    setError,\n  } = useForm<loginPayload>();\n\n  const handleServerErrors = useCallback((errors) => {\n    if (typeof errors === 'string') {\n      const message = errors;\n      notify({ message, type: 'danger' });\n    } else {\n      setError('password', { type: 'invalid', message: errors?.['password'] });\n    }\n  }, []);\n\n  const onSubmit = useCallback<SubmitHandler<Task>>((task, event) => {\n    dispatch(login(new FormData(event?.target)))\n      .then(unwrapResult)\n      .then((response) => {\n        notify({ message: 'Login success', type: 'success' });\n        props.onDone && props.onDone();\n      })\n      .catch((errors: Record<keyof Task, string>) => handleServerErrors(errors));\n  }, []);\n  return (\n    <Form onSubmit={handleSubmit(onSubmit)}>\n      <Form.Group controlId=\"username\">\n        <Form.Label>Username</Form.Label>\n        <Form.Control isInvalid={!!errors.username} {...register('username', { required: true })} />\n        <ErrorMessage error={errors.username} />\n      </Form.Group>\n      <Form.Group controlId=\"password\">\n        <Form.Label>Password</Form.Label>\n        <Form.Control type=\"password\" isInvalid={!!errors.password} {...register('password', { required: true })} />\n        <ErrorMessage error={errors.password} />\n      </Form.Group>\n      <Row>\n        <Col></Col>\n        <Col md=\"auto\">\n          <Button variant=\"primary\" type=\"submit\">\n            Sing in\n          </Button>\n        </Col>\n      </Row>\n      <Loader visible={loading} />\n    </Form>\n  );\n};\n\nexport default AuthFormsLogin;\n","import { useCallback } from 'react';\nimport { useEffect } from 'react';\nimport { useState } from 'react';\nimport { Button, Col, Modal, Row } from 'react-bootstrap';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { initializeAuthentication, logout } from '../../../../auth/store/index/actions';\nimport { isAuthorizedSelector } from '../../../../auth/store/index/selectors';\nimport AuthFormsLogin from '../../../../auth/ui/forms/login';\n\nconst NavigationComponentHeader = () => {\n  const dispatch = useDispatch();\n  const authorized = useSelector(isAuthorizedSelector);\n  const [isAuthModalShown, setIsAuthModalShown] = useState(false);\n  useEffect(() => {\n    dispatch(initializeAuthentication());\n  }, []);\n  const onLogoutClick = useCallback(() => {\n    dispatch(logout());\n  }, []);\n  return (\n    <>\n      <Row className=\"py-4\">\n        <Col></Col>\n        <Col sm=\"auto\">\n          {authorized && (\n            <Button variant=\"danger\" onClick={onLogoutClick}>\n              Logout\n            </Button>\n          )}\n          {!authorized && (\n            <Button variant=\"info\" onClick={setIsAuthModalShown.bind(null, true)}>\n              Login\n            </Button>\n          )}\n        </Col>\n      </Row>\n      <Modal show={isAuthModalShown} onHide={setIsAuthModalShown.bind(null, false)}>\n        <Modal.Header closeButton>\n          <Modal.Title>Вход</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n          <AuthFormsLogin onDone={setIsAuthModalShown.bind(null, false)}></AuthFormsLogin>\n        </Modal.Body>\n      </Modal>\n    </>\n  );\n};\n\nexport default NavigationComponentHeader;\n","import { Container } from 'react-bootstrap';\nimport NavigationComponentHeader from '../../components/header';\n\ntype Props = {\n  children: JSX.Element;\n};\n\nconst NavigationLayoutsMain = (props: Props) => {\n  return (\n    <Container>\n      <NavigationComponentHeader></NavigationComponentHeader>\n      {props.children}\n    </Container>\n  );\n};\n\nexport default NavigationLayoutsMain;\n","import { useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport { AUTH_TOKEN } from '../auth/store/index/actions';\nimport { clearToken, setToken } from '../auth/store/index/reducer';\nimport TasksPagesIndex from '../tasks/ui/pages/index';\nimport NavigationLayoutsMain from './ui/layouts/main';\n\nconst Navigator = () => {\n  const dispatch = useDispatch();\n  useEffect(() => {\n    const storageEventsListener = function (event: WindowEventMap['storage']) {\n      if (event.key === AUTH_TOKEN) {\n        if (event.newValue) {\n          dispatch(setToken(event.newValue));\n        } else {\n          dispatch(clearToken());\n        }\n      }\n    };\n    window.addEventListener('storage', storageEventsListener);\n    return () => window.removeEventListener('storage', storageEventsListener);\n  }, []);\n  return (\n    <NavigationLayoutsMain>\n      <Router>\n        <Switch>\n          <Route path=\"/sign-in\"></Route>\n          <Route exact={true} path=\"/\">\n            <TasksPagesIndex></TasksPagesIndex>\n          </Route>\n        </Switch>\n      </Router>\n    </NavigationLayoutsMain>\n  );\n};\n\nexport default Navigator;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { createSlice } from '@reduxjs/toolkit';\nimport { SortParams } from '../../domain/interfaces/sortParams';\nimport { loadTasks, saveTask, setPage, setSortParams } from './actions';\nimport { tasksAdapter } from './adapter';\n\nconst tasksSlice = createSlice({\n  name: 'tasks-index',\n  initialState: tasksAdapter.getInitialState({\n    loading: false,\n    currentPageTasksIds: [] as number[],\n    tasksCount: 0,\n    page: 1,\n    sort: {} as SortParams,\n  }),\n  reducers: {},\n  extraReducers: (builder) => {\n    builder.addCase(setPage, (state, { payload }) => {\n      state.page = payload;\n    });\n    builder.addCase(setSortParams, (state, { payload }) => {\n      state.sort.direction = payload.direction;\n      state.sort.field = payload.field;\n    });\n    builder.addCase(loadTasks.pending, (state) => {\n      state.loading = true;\n    });\n    builder.addCase(loadTasks.fulfilled, (state, { payload }) => {\n      state.currentPageTasksIds = payload.tasks.map((task) => task.id);\n      state.tasksCount = payload.total_task_count;\n      tasksAdapter.upsertMany(state, payload.tasks);\n      state.loading = false;\n    });\n    builder.addCase(loadTasks.rejected, (state) => {\n      state.loading = false;\n    });\n    builder.addCase(saveTask.pending, (state) => {\n      state.loading = true;\n    });\n    builder.addCase(saveTask.fulfilled, (state, { payload }) => {\n      state.loading = false;\n    });\n    builder.addCase(saveTask.rejected, (state) => {\n      state.loading = false;\n    });\n  },\n});\n\ntype tasksStore = ReturnType<typeof tasksSlice.reducer>;\nconst tasksStore = tasksSlice.reducer;\n\nexport default tasksStore;\n","import { configureStore } from '@reduxjs/toolkit';\nimport authStore from '../app/modules/auth/store/index/reducer';\nimport tasksStore from '../app/modules/tasks/store/index/reducer';\n\nconst store = configureStore({\n  reducer: {\n    tasksStore,\n    authStore,\n  },\n});\n\nexport type AppDispatch = typeof store.dispatch;\n\nexport default store;\n","import 'bootstrap/dist/css/bootstrap.min.css';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { Notification } from './app/modules/common/ui/components/notify';\nimport Navigator from './app/modules/navigation/routes';\nimport reportWebVitals from './reportWebVitals';\nimport store from './store';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <Navigator />\n    </Provider>\n    <Notification />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals(console.log);\n"],"sourceRoot":""}